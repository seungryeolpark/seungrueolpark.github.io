---
title: 스프링이란?
categories: springBase
---
## 스프링이란?
스프링은 자바 언어 기반의 프레임워크로 객체 지향 언어가 가진 강력한 특징을 살려내   
좋은 객체 지향 어플리케이션을 개발할 수 있게 도와준다.

## 좋은 객체 지향이란?
객체 지향 프로그래밍   
유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용   

**유연하고 변경이 용이하게 만들기 위해선?**

## 객체 지향 특징
+ 추상화 - 공통의 속성이나 기능을 묶어 이름을 붙이는 것   
객체 지향적 관점에서 클래스를 정의하는 것이 추상화라고 정의할 수 있다.

+ 캡슐화 - 데이터 구조(변수)와 데이터를 다루는 방법(함수)들을 결합 시켜 묶는 것   
데이터들을 외부에 노출하여 직접적으로 데이터가 변경되게 하지 않고
데이터들을 내부에 숨기고 그 데이터를 다루는 함수를 만들어 외부에 노출하지 않고(정보은닉)
함수를 통해 간접적으로 데이터를 다루게 만드는 것을 캡슐화라고 할 수 있다.

+ 상속 - 상위 개념의 특징을 하위 개념이 물려 받는 것

+ 다형성 - 부모클래스에서 물려받은 가상 함수(인터페이스)를 자식 클래스 내에서 오버라이딩
되어 사용되는 것
  
## 다형성의 본질
+ 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.
+ 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.   
**즉 프로그램을 유연하고 변경이 용이하게 만들 수 있다.**   
**그렇다면 다형성이 어떻게 프로그램을 유연하고 변경이 용이하게 만들 수 있을까?**

### 다형성을 역할과 구현으로 구분
+ 역할과 구현으로 구분하고 구현이 역할에 의존하게 만들면 세상이 단순해지고, 유연해지며 변경도 편리해진다.   
+ 객체 설계시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체, 클래스 만든다.  
+ 다형성의 실세계 비유 - 키보드, 마우스, 세상의 표준 인터페이스들
+ 코드 비유 - 맴버를 저장하는 역할(인터페이스) MemberRepository가 있고 그 역할을 수행하는데, 
메모리로 수행하는 MemoryMemberRepository와 DB로 수행하는 JdbcMemberRepository라는 구현 클래스들이 있다.

## 좋은 객체 지향 설계의 5가지 원칙 SOLID

+ **SRP 단일 책임 원칙 - 한 클래스는 하나의 책임만 가져야 한다.**   
  + 중요한 기준은 변경, 변경이 있을 때 파급효과가 적으면 SRP를 잘 따른 것

+ **OCP 개방 폐쇄 원칙 - 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.**   
  + 다형성을 활용, 인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현   
  + **OCP 문제점**   
    + 구현 객체를 변경할려면 클라이언트 코드를 변경해야 한다. -> 다형성을 사용했지만 OCP 원칙을 지킬 수 없다.  
    + 객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다.
```java
public class MemberService {
    private MemberRepository memberRepository = new MemoryMemberRepository();
}
```
```java
public class MemberService {
//  private MemberRepository memberRepository = new MemoryMemberRepository();
    private MemberRepository memberRepository = new JdbcMemberRepository();
}
```

+ **LSP 리스코프 치환 원칙 - 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.**  
  + 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 
  인터페이스를 구현한 구현체는 믿고 사용하려면 이 원칙이 필요하다.  
  ex)자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 뒤로 가게 구현하면 LSP 위반이다.

+ **ISP 인터페이스 분리 원칙 - 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.**  
  + 만약 자동차 인터페이스를 운전 인터페이스와 장비 인터페이스로 분리한다면 
  정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음.  
  + **인터페이스가 명확해지고 대체 가능성이 높아진다.**

+ **DIP 의존관계 역전 원칙 - 추상화에 의존하고 구체화에 의존하면 안된다. 즉 구현 클래스(구현)에 의존하지 말고 인터페이스(역할)에 의존해야한다.**  
  + **DIP 문제점**
    + 인터페이스에 의존하지만, 구현클래스도 동시에 의존한다. -> DSP 위반
    + MemberService 클라이언트가 구현 클래스를 직접 선택
 ```java
public class MemberService {
    private MemberRepository memberRepository = new MemoryMemberRepository();
}
```

### 결론
+ 객체 지향의 핵심은 다형성 (대부분의 원칙에서 다형성과 관계가 있다)  
+ 다형성만으로는 OCP, DSP를 지킬 수 없다.  

### 스프링으로 해결할 수 있다.
+ 스프링은 DI로 다형성 + OCP, DIP를 가능하게 지원, DI 컨테이너 제공  
+ DI(Dependency Injection)은 의존성 주입으로 객체들간의 관계를 관리할때 사용하는 기법  
의존성 주입이란 의존적인 객체를 직접 생성하거나 제어하는 것이 아니라 **특정 개체에 필요한 객체를 외부에서 결정해서 연결시키는 것**  
이러한 의존성 주입으로 인해 모듈간의 결합도가 낮아지고 유연성이 높아진다.

## 스프링이란
+ 자바를 SOLID 원칙을 지켜 좋은 객체 지향를 만들기 쉽게 해주는 프레임워크이다.  
+ 순수하게 자바로 OCP, DIP 원칙들을 지키면서 개발을 해보면 결국 스프링 프레임워크를 만들게 된다 (더 정확히는 DI 컨테이너)  
+ 클라이언 코드의 변경없이 기능이 확장(OCP)되고 쉽게 부품을 교체(DSP)하듯이 개발할 수 있다. 

## 정리
+ 모든 설계에는 역할과 구현으로 분리  
+ 애플리케이션 설계에도 역할은 만들어두고 구현은 언제든지 유연하게 변경할 수 있도록 만드는 것이 좋은 객체 지향 설계  
+ 이상적으로는 모든 설계에 인터페이스를 부여하는 것이 좋지만 인터페이스를 도입하면 추상화라는 비용이 발생한다.  
기능을 확장할 가능성이 없다면, 구체 클래스를 직접 사용하고, 향후 꼭 필요할 때 리펙터링해서 인터페이스를 도입하는 것도 방법이다.  

출처 - [스프링 핵심 원리 - 기본편 ](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/dashboard)

