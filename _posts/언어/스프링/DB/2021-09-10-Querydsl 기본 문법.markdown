---
title: Querydsl 기본 문법
categories: springDB
---

## 목차
+ [Querydsl](#Querydsl)
+ [Querydsl vs JPQL](#Querydsl-vs-JPQL)
+ [기본 Q-Type 활용](#기본-Q-Type-활용)
+ [검색 조건 쿼리](#검색-조건-쿼리)
+ [결과 조회](#결과-조회)
+ [정렬](#정렬)
+ [페이징](#페이징)
+ [집합](#집합)
+ [조인](#조인)
+ [서브 쿼리](#서브-쿼리)
+ [상수 문자 더하기](#상수-문자-더하기)

## Querydsl
+ Querydsl 는 Query를 자바코드로 만들 수 있게 해준다.(문법 오류를 컴파일 오류로 바꾼다.)
+ Querydsl 에는 apt, jpa 가 있다.
  + apt
    + apt 는 Annotation Processing Tool 의 약자이고 Annotation 이 있는 기존코드를 바탕으로 새로운 코드와 새로운 파일들을 만든다.
    + Querydsl 에서 'Q' 가 붙는 클래스들을 자동 생성한다.
  + jpa
    + jpa 는 Java Persistence API의 약자이고 자바 진영의 ORM 기술 표준으로, 인터페이스의 모음이다.
    + jpa 는 애플리케이션과 JDBC 사이에서 동작한다. (JPA 내부에서 JDBC API 를 사용하여 SQL 를 호출하여 DB 와 통신한다.)
+ 최신버전에선 JPAQueryFactory 를 쓰도록 권장한다.
  + ex) JPAQueryFactory query = new JPAQueryFactory(em);

### 생성자 방식
1.
```java
@Repository
public class MemberJpaRepository {
     private final EntityManager em;
     private final JPAQueryFactory queryFactory;
     public MemberJpaRepository(EntityManager em) {
         this.em = em;
         this.queryFactory = new JPAQueryFactory(em);
 }
}
```
2. 
JPAQueryFactory 스프링 빈 등록
```java
@Bean
JPAQueryFactory jpaQueryFactory(EntityManager em) {
return new JPAQueryFactory(em);
}
```
```java
@Repository
@RequiredArgsConstructor
public class MemberJpaRepository {
    private final EntityManager em;
    private final JPAQueryFactory queryFactory;
}
```

### 참고
+ 동시성 문제는 걱정하지 않아도 된다.
+ 여기서 스프링이 주입해주는 엔티티 매니저는 실제 동작 시점에 진짜 엔티티 매니저를 찾아주는 프록시용 가짜 엔티티 매니저이다.
+ 가짜 엔티티 매니저는 실제 사용 시점에 트랜잭션 단위로 실제 엔티티 매니저(영속성 컨텍스트)를 할당해준다.

## Querydsl vs JPQL
```java
@Test
public void startJPQL() {
   //member1을 찾아라.
   String qlString =
   "select m from Member m " +
   "where m.username = :username";
   
   Member findMember = em.createQuery(qlString, Member.class)
       .setParameter("username", "member1")
       .getSingleResult();
       
   assertThat(findMember.getUsername()).isEqualTo("member1");
}
@Test
public void startQuerydsl() {
   //member1을 찾아라.
   JPAQueryFactory queryFactory = new JPAQueryFactory(em);
   QMember m = new QMember("m");
   Member findMember = queryFactory
       .select(m)
       .from(m)
       .where(m.username.eq("member1"))//파라미터 바인딩 처리
       .fetchOne();
       
   assertThat(findMember.getUsername()).isEqualTo("member1");
}
```
+ EntityManager 로 JPAQueryFactory 생성
+ Querydsl 은 JPQL 빌더
+ JPQL : 문자(런타임 오류), Querydsl : 코드(컴파일 시점 오류)
+ JPQL : 파라미터 바인딩 직접 입력, Querydsl : 파라미터 바인딩 자동 처리

### JPAQueryFactory 필드에서 동시성 문제
+ 동시성 문제는 JPAQueryFactory 를 생성할 때 제공하는 EntityManager(em) 에 달려있다.
+ 스프링 프레임워크는 여러 쓰레드에서 동시에 같은 EntityManager에 접근해도, 트랜잭션 마다 별도의 영속성 컨텍스트를 제공하기 때문에, 동시성 문제는 걱정하지 않아도 된다.

## 기본 Q-Type 활용
### Q클래스 인스턴스를 사용하는 2가지 방법
```java
QMember qMember = new QMember("m"); //별칭 직접 지정
QMember qMember = QMember.member; //기본 인스턴스 사용
```

### 기본 인스턴스를 static import와 함께 사용
```java
import static study.querydsl.entity.QMember.*;

@Test
public void startQuerydsl() {
   //member1을 찾아라.
   Member findMember = queryFactory
       .select(member)
       .from(member)
       .where(member.username.eq("member1"))
       .fetchOne();
       
   assertThat(findMember.getUsername()).isEqualTo("member1");
}
```

### 다음 설정을 추가하면 실행되는 JPQL을 볼 수 있다.
```yml
spring.jpa.properties.hibernate.use.sql.comments: true
```

### 참고
+ 같은 테이블을 조인해야 하는 경우가 아니라면 기본 인스턴스를 사용하자.

## 검색 조건 쿼리
**기본 검색 쿼리**
```java
@Test
public void search() {
   Member findMember = queryFactory
       .selectFrom(member)
       .where(member.username.eq("member1")
       .and(member.age.eq(10)))
       .fetchOne();
       
   assertThat(findMember.getUsername()).isEqualTo("member1");
}
```
+ 검색 조건은 .and(), .or() 를 메서드 체인으로 연결할 수 있다.
+ select, from 을 selectFrom 으로 합칠 수 있다.

### JPQL이 제공하는 모든 검색 조건 제공
```java
member.username.eq("member1") // username = 'member1'
member.username.ne("member1") //username != 'member1'
member.username.eq("member1").not() // username != 'member1'
member.username.isNotNull() //이름이 is not null
member.age.in(10, 20) // age in (10,20)
member.age.notIn(10, 20) // age not in (10, 20)
member.age.between(10,30) //between 10, 30
member.age.goe(30) // age >= 30
member.age.gt(30) // age > 30
member.age.loe(30) // age <= 30
member.age.lt(30) // age < 30
member.username.like("member%") //like 검색
member.username.contains("member") // like ‘%member%’ 검색
member.username.startsWith("member") //like ‘member%’ 검색
```

### AND 조건을 파라미터로 처리
```java
@Test
public void searchAndParam() {
   List<Member> result1 = queryFactory
       .selectFrom(member)
       .where(member.username.eq("member1"),
              member.age.eq(10))
       .fetch();
       assertThat(result1.size()).isEqualTo(1);
}
```
+ where() 에 파라미터로 검색조건을 추가하면 AND 조건이 추가됨
+ 이 경우 null 값은 무시 -> 메서드 추출을 활용해서 동적 쿼리를 깔끔하게 만들 수 있음

## 결과 조회
+ fetch() : 리스트 조회, 데이터 없으면 빈 리스트 반환
+ fetchOne() : 단 건 조회
  + 결과가 없으면 : null
  + 결과가 둘 이상이면 : com.querydsl.core.NonUniqueResultException
+ fetchFirst() : limit(1).fetchOne()
+ fetchResults() : 페이징 정보 포함, total count 쿼리 추가 실행
+ fetchCount() : count 쿼리로 변경해서 count 수 조회

## 정렬
**사용 예시**
```java
List<Member> result = queryFactory
     .selectFrom(member)
     .where(member.age.eq(100))
     .orderBy(member.age.desc(), member.username.asc().nullsLast())
     .fetch();
```
+ desc(), asc() : 일반 정렬
+ nullsLast(), nullsFirst() : null 데이터 순서 부여

## 페이징
### 조회 건수 제한
```java
@Test
public void paging1() {
     List<Member> result = queryFactory
         .selectFrom(member)
         .orderBy(member.username.desc())
         .offset(1) //0부터 시작(zero index)
         .limit(2) //최대 2건 조회
         .fetch();
         
     assertThat(result.size()).isEqualTo(2);
}
```
### 전체 조회 수
```java
@Test
public void paging2() {
     QueryResults<Member> queryResults = queryFactory
         .selectFrom(member)
         .orderBy(member.username.desc())
         .offset(1)
         .limit(2)
         .fetchResults();
     
     assertThat(queryResults.getTotal()).isEqualTo(4);
     assertThat(queryResults.getLimit()).isEqualTo(2);
     assertThat(queryResults.getOffset()).isEqualTo(1);
     assertThat(queryResults.getResults().size()).isEqualTo(2);
}
```
### 참고
+ 실무에서 페이징 쿼리를 작성할 때, 데이터를 조회하는 쿼리는 여러 테이블을 조인해야 하지만, count 쿼리는 조인이 필요 없는 경우도 있다.
+ 자동화된 count 쿼리는 원본 쿼리와 같이 모두 조인을 해버리기 때문에 성능이 안나올 수 있다.
+ count 쿼리에 조인이 필요없는 성능 최적화가 필요하다면, count 전용 쿼리를 별도로 작성해야 한다.

## 집합
### 집합 함수
```java
@Test
public void aggregation() throws Exception {
     List<Tuple> result = queryFactory
         .select(member.count(),
             member.age.sum(),
             member.age.avg(),
             member.age.max(),
             member.age.min())
         .from(member)
         .fetch();
     
     Tuple tuple = result.get(0);
     assertThat(tuple.get(member.count())).isEqualTo(4);
     assertThat(tuple.get(member.age.sum())).isEqualTo(100);
     assertThat(tuple.get(member.age.avg())).isEqualTo(25);
     assertThat(tuple.get(member.age.max())).isEqualTo(40);
     assertThat(tuple.get(member.age.min())).isEqualTo(10);
}
```
+ JPQL 이 제공하는 모든 집합 함수를 제공한다.

### GroupBy
```java
@Test
public void group() throws Exception {
     List<Tuple> result = queryFactory
         .select(team.name, member.age.avg())
         .from(member)
         .join(member.team, team)
         .groupBy(team.name)
         .fetch();
         
     Tuple teamA = result.get(0);
     Tuple teamB = result.get(1);
     
     assertThat(teamA.get(team.name)).isEqualTo("teamA");
     assertThat(teamA.get(member.age.avg())).isEqualTo(15);
     assertThat(teamB.get(team.name)).isEqualTo("teamB");
     assertThat(teamB.get(member.age.avg())).isEqualTo(35);
}
```
+ groupBy 그룹화된 결과를 제한하려면 having
+ **groupBy(), having() 예시**
```java
.groupBy(item.price)
.having(item.price.gt(1000))
```

## 조인
### 기본 조인
```java
@Test
public void join() throws Exception {
     QMember member = QMember.member;
     QTeam team = QTeam.team;
     List<Member> result = queryFactory
         .selectFrom(member)
         .join(member.team, team)
         .where(team.name.eq("teamA"))
         .fetch();
     
     assertThat(result)
     .extracting("username")
     .containsExactly("member1", "member2");
}
```
+ join(조인 대상, 별칭으로 사용할 Q타입)
+ join(), innerJoin() : 내부 조인(inner join)
+ leftJoin() : left 외부 조인(left outer join)
+ rightJoin() : right 외부 조인(right outer join)
+ JPQL의 on 과 성능 최적화를 위한 fetch 조인 제공

### 세타 조인
연관관계가 없는 필드로 조인
```java
@Test
public void theta_join() throws Exception {
     em.persist(new Member("teamA"));
     em.persist(new Member("teamB"));

     List<Member> result = queryFactory
         .select(member)
         .from(member, team)
         .where(member.username.eq(team.name))
         .fetch();

     assertThat(result)
     .extracting("username")
     .containsExactly("teamA", "teamB");
}
```
+ from 절에 여러 엔티티를 선택해서 세타 조인

### 조인 on 절
**조인 대상 필터링**
```java
@Test
public void join_on_filtering() throws Exception {
     List<Tuple> result = queryFactory
         .select(member, team)
         .from(member)
         .leftJoin(member.team, team).on(team.name.eq("teamA"))
         .fetch();
         
     for (Tuple tuple : result) {
     System.out.println("tuple = " + tuple);
     }
}
```
**결과**
```java
t=[Member(id=3, username=member1, age=10), Team(id=1, name=teamA)]
t=[Member(id=4, username=member2, age=20), Team(id=1, name=teamA)]
t=[Member(id=5, username=member3, age=30), null]
t=[Member(id=6, username=member4, age=40), null]
```
+ on 절을 활용해 조인 대상을 필터링 할 때, 외부조인이 아니라 내부조인을 사용하면, where 절에서 필터링 하는 것과 기능이 동일하다.
+ on 절을 활용한 조인 대상 필터링을 사용할 때, 내부조인이면 익숙한 where 절로 해결하고, 정말 외부조인이 필요한 경우에만 이 기능을 사용하자.

**연관관계 없는 엔티티 외부 조인**
```java
@Test
public void join_on_no_relation() throws Exception {
     em.persist(new Member("teamA"));
     em.persist(new Member("teamB"));
     List<Tuple> result = queryFactory
         .select(member, team)
         .from(member)
         .leftJoin(team).on(member.username.eq(team.name))
         .fetch();
         
     for (Tuple tuple : result) {
     System.out.println("t=" + tuple);
     }
}
```
**결과**
```java
t=[Member(id=3, username=member1, age=10), null]
t=[Member(id=4, username=member2, age=20), null]
t=[Member(id=5, username=member3, age=30), null]
t=[Member(id=6, username=member4, age=40), null]
t=[Member(id=7, username=teamA, age=0), Team(id=1, name=teamA)]
t=[Member(id=8, username=teamB, age=0), Team(id=2, name=teamB)]
```
+ 일반조인 : leftJoin(member.team, team)
+ on조인 : from(member).leftJoin(team).on(xxx)

### 조인 패치 조인
+ SQL 조인을 활용해서 연관된 엔티티를 SQL 한번에 조회하는 기능
+ 주로 성능 최적화에 사용하는 방법
+ 페치 조인 미적용 : 지연로딩으로 SQL 쿼리 각각 실행
+ 페치 조인 적용 : 즉시로딩으로 SQL 쿼리 조인으로 한번에 조회

```java
@Test
public void fetchJoinUse() throws Exception {
     em.flush();
     em.clear();
     Member findMember = queryFactory
         .selectFrom(member)
         .join(member.team, team).fetchJoin()
         .where(member.username.eq("member1"))
         .fetchOne();
         
     boolean loaded =
    emf.getPersistenceUnitUtil().isLoaded(findMember.getTeam());
     assertThat(loaded).as("페치 조인 적용").isTrue();
}
```
+ join(), leftJoin() 등 조인 기능 뒤에 fetchJoin() 추가

## 서브 쿼리
com.querydsl.jpa.JPAExpressions 사용
### 서브 쿼리 eq 사용
```java
@Test
public void subQuery() throws Exception {
     QMember memberSub = new QMember("memberSub");
     List<Member> result = queryFactory
         .selectFrom(member)
         .where(member.age.eq(
         JPAExpressions
             .select(memberSub.age.max())
             .from(memberSub)
     ))
     .fetch();
     
     assertThat(result).extracting("age")
     .containsExactly(40);
}
```
### 서브쿼리 여러건 처리 in 사용
```java
@Test
public void subQueryIn() throws Exception {
     QMember memberSub = new QMember("memberSub");
     List<Member> result = queryFactory
         .selectFrom(member)
         .where(member.age.in(
         JPAExpressions
             .select(memberSub.age)
             .from(memberSub)
             .where(memberSub.age.gt(10))
     ))
     .fetch();
     
     assertThat(result).extracting("age")
     .containsExactly(20, 30, 40);
}
```
### select 절에 subquery
```java
List<Tuple> fetch = queryFactory
     .select(member.username,
     JPAExpressions
         .select(memberSub.age.avg())
         .from(memberSub)
     ).from(member)
     .fetch();
     
    for (Tuple tuple : fetch) {
         System.out.println("username = " + tuple.get(member.username));
         System.out.println("age = " +
        tuple.get(JPAExpressions.select(memberSub.age.avg())
         .from(memberSub)));
}
```
### from 절의 서브쿼리 한계
+ JPA JPQL는 from 절의 서브쿼리는 지원하지 않는다. 당연히 Querydsl 도 지원하지 않는다.
+ 하이버네이트 구현체를 사용하면 select 절의 서브쿼리는 지원한다. Querydsl 도 하이버네이트 구현체를 사용하면 select 절의 서브쿼리를 지원한다.

### from 절의 서브쿼리 해결방안
1. 서브쿼리를 join으로 변경한다.
2. 애플리케이션에서 쿼리를 2번 분리해서 실행한다.
3. nativeSQL을 사용한다.

## 상수 문자 더하기
상수가 필요하면 Expressions.constant(xxx) 사용
```java
Tuple result = queryFactory
     .select(member.username, Expressions.constant("A"))
     .from(member)
     .fetchFirst();
```
+ 최적화가 가능하면 SQL 에 constant 값을 넘기지 않는다.
+ 상수를 더하는 것처럼 최적화가 어려우면 SQL 에 constant 값을 넘긴다.

### 문자 더하기 concat
```java
String result = queryFactory
     .select(member.username.concat("_").concat(member.age.stringValue()))
     .from(member)
     .where(member.username.eq("member1"))
     .fetchOne();
```
+ 결과 : member1_10
+ 문자가 아닌 다른 타입들은 stringValue() 로 문자로 변환할 수 있다.
+ 이 방법은 ENUM 을 처리할 때도 자주 사용한다.


출처 - [실전! Querydsl](https://www.inflearn.com/course/Querydsl-%EC%8B%A4%EC%A0%84/dashboard)
