---
title: 참고
categories: springDB
---
**목차**
+ [1. 유니크 제약 조건](#1-유니크-제약-조건)
+ [2. 스프링 필드 주입 대신에 생성자 주입을 사용하자](#2-스프링-필드-주입-대신에-생성자-주입을-사용하자)
+ [3. HashMap, ConcurrentHashMap](#3-HashMap-ConcurrentHashMap)
+ [4. 실무에서는 @ManyToMany 를 사용하지 말자](#4-실무에서는-ManyToMany-를-사용하지-말자)
+ [5. 모든 연관관계는 지연로딩으로 설정](#5-모든-연관관계는-지연로딩으로-설정)
+ [6. 엔티티는 가급적 Setter 를 사용하지 말자](#6-엔티티는-가급적-Setter-를-사용하지-말자)
+ [7. 컬렉션은 필드에서 초기화 하자](#7-컬렉션은-필드에서-초기화-하자)
+ [8. Test, @Transactional](#8-Test-Transactional)
+ [9. Spring jpa query 로그에서 value (?) 값이 궁금할 경우](#9-Spring-jpa-query-로그에서-value--값이-궁금할-경우)
+ [10. lombok @ToString](#10-lombok-ToString)
+ [11. PUT, PATCH](#11-PUT-PATCH)
+ [12. DB 표기 스타일](#12-DB-표기-스타일)
+ [13. 값 타입은 변경 불가능하게 설계 하자](#13-값-타입은-변경-불가능하게-설계-하자)
+ [14. 폼 객체 vs 엔티티 직접 사용](#14-폼-객체-vs-엔티티-직접-사용)

### 1. 유니크 제약 조건
+ 실무에서는 검증 로직이 있어도 멀티 쓰레드 상황을 고려해서 회원 테이블의 회원명 컬럼에 유니크 제약 조건을 추가하는 것이 안전하다.

### 2. 스프링 필드 주입 대신에 생성자 주입을 사용하자
**필드 주입**
```java
public class MemberService {
 @Autowired
 MemberRepository memberRepository;
 ...
}
```

**생성자 주입**
```java
public class MemberService {
 private final MemberRepository memberRepository;
 public MemberService(MemberRepository memberRepository) {
 this.memberRepository = memberRepository;
 }
 ...
}
```

**lombok으로 생성자 주입 단축 가능**
```java
@RequiredArgsConstructor
public class MemberService {
 private final MemberRepository memberRepository;
 ...
}
```

**스프링 데이터 JPA를 사용하면 EntityManager도 주입 가능**
```java
@Repository
@RequiredArgsConstructor
public class MemberRepository {
 private final EntityManager em;
 ...
}
```

+ 생성자 주입 방식을 권장
+ 변경 불가능한 안전한 객체 생성 가능
+ final 키워드를 추가하면 컴파일 시점에 memberRepository 를 설정하지 않는 오류를 체크할 수 있다.(보통 기본 생성자를 추가할 때 발견)

### 3. HashMap, ConcurrentHashMap
+ 동시 요청이 필요한 상황에 HashMap은 동시 요청에 안전하지 않으니 동시 요청에 안전한 ConcurrentHashMap을 사용하자.

### 4. 실무에서는 @ManyToMany 를 사용하지 말자
+ @ManyToMany 는 편리한 것 같지만, 중간 테이블에 컬럼을 추가할 수 없고, 세밀하게 쿼리를 실행하기 어렵기 때문에 실무에서 사용하기에 한계가 있다.
+ 중간 엔티티를 만들고 @ManyToOne, @OneToMany 로 매핑해서 사용하자.
+ 정리하면 대다대 매핑을 일대다, 다대일 매핑으로 풀어서 사용하자.

### 5. 모든 연관관계는 지연로딩으로 설정
+ 즉시로딩(EAGER)은 예측이 어렵고, 어떤 SQL이 실행될지 추적하기 어렵다.
+ 특히 JPQL을 실행할 때 N+1 문제가 자주 발생한다.
+ 모든 연관관계는 지연로딩(LAZY)으로 설정해야 한다.
+ 연관된 엔티티를 함께 DB에서 조회해야 하면, fetch join 또는 엔티티 그래프 기능을 사용한다.
+ @XToOne(OneToOne, ManyToOne) 관계는 기본이 즉시로딩이므로 직접 지연로딩으로 설정해야 한다.

### 6. 엔티티는 가급적 Setter 를 사용하지 말자
+ Setter가 열려있으면 변경 포인트가 너무 많아서, 유지보수가 어렵다.

### 7. 컬렉션은 필드에서 초기화 하자
+ 컬렉션은 필드에서 바로 초기화 하는 것이 안전하다.(null 문제에서 안전하다.)
+ 하이버네이트는 엔티티를 영속화 할 때, 컬렉션을 감싸서 하이버네이트가 제공하는 내장 컬렉션으로 변경한다.
+ 만약 getOrders() 처럼 임의의 메서드에서 컬렉션을 잘못 생성하면 하이버네이트 내부 메커니즘에 문제가 발생할 수 있다.
+ 따라서 필드레벨에서 생성하는 것이 가장 안전하고, 코드도 간결하다.

**example**
```java
Member member = new Member();
System.out.println(member.getOrders().getClass());
em.persist(team);
System.out.println(member.getOrders().getClass());
//출력 결과
class java.util.ArrayList
class org.hibernate.collection.internal.PersistentBag
```

### 8. Test, @Transactional
+ Test 에서 @Transactional 은 실행후 백업하기에 테이블에 데이터가 안남는다.
+ 데이터가 남길 원할경우 @Commit 어노테이션을 추가해야한다.

### 9. Spring jpa query 로그에서 value (?) 값이 궁금할 경우
+ 1. application.yml 설정으로 해결
```yml
logging.level:
 org.hibernate.SQL: debug
 org.hibernate.type: trace
```
+ 2. gradle 라이브러리 추가로 해결
```gradle
implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'
```
+ 쿼리 파라미터를 로그로 남기는 외부 라이브러리는 시스템 자원을 사용한다.
+ 개발 단계에서는 편하게 사용해도 된다. 하지만 운영시스템에 적용하려면 꼭 성능테스트를 하고 사용하는 것이 좋다.

### 10. lombok @ToString
+ @ToString 어노테이션을 쓸 경우 연관관계 field 를 넣지 말아야한다.

### 11. PUT, PATCH
+ PUT 은 전체 업데이트를 할 때 사용하는 것이 맞다.
+ 부분 업데이트를 하려면 PATCH 를 사용하거나 POST 를 사용하는 것이 REST 스타일에 맞다.
+ 연관관계를 넣으면 무한순환으로 에러가 발생한다.

### 12. DB 표기 스타일
+ 데이터베이스 테이블명, 컬럼명에 대한 관례는 회사마다 다르다.
+ 보통은 대문자 + _(언더스코어)나 소문자 + _(언더스코어) 방식 중에 하나를 지정해서 일관성 있게 사용한다.

### 13. 값 타입은 변경 불가능하게 설계 하자
+ @Setter 를 제거하고, 생성자에서 값을 모두 초기화해서 변경 불가능한 클래스를 만들자.
+ JPA 스펙상 엔티티나 임베디드 타입(@Embeddable)은 자바 기본 생성자(default constructor)를 public 또는 protected 로 설정해야 한다.
+ public 으로 두는 것 보다는 protected 로 설정하는 것이 그나마 더 안전하다.
+ JPA 가 이런 제약을 두는 이유는 JPA 구현 라이브러리가 객체를 생성할 때 리플렉션 같은 기술을 사용할 수 있도록 지원해야 하기 때문이다.

**리플렉션**
+ 구체적인 클래스 타입을 알지 못해도, 그 클래스의 메소드, 타입, 변수들을 접근할 수 있도록 해주는 자바 API

### 14. 폼 객체 vs 엔티티 직접 사용
+ 실무에서 **엔티티는 핵심 비즈니스 로직만 가지고 있고, 화면을 위한 로직은 없어야 한다.**
+ 화면이나 API 에 맞는 폼 객체나 DTO 를 사용하여 화면이나 API 요구사항을 이것들로 처리하자.
+ 엔티티는 최대한 순수하게 유지하자.
