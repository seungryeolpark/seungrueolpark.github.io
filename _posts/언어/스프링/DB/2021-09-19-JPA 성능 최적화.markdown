---
title: JPA 성능 최적화
categories: springDB
---

**목차**
+ [변경 감지와 병합(merge)](#변경-감지와-병합merge)
+ [지연 로딩과 조회 성능 최적화](#지연-로딩과-조회-성능-최적화)

## 변경 감지와 병합(merge)
### 준영속 엔티티
+ 영속성 컨텍스트가 더는 관리하지 않는 엔티티

**준영속 엔티티를 수정하는 2가지 방법**
+ 변경 감지 기능 사용
+ 병합(merge) 사용

### 변경 감지 기능 사용
```java
@Transactional
void update(Item itemParam) { //itemParam: 파리미터로 넘어온 준영속 상태의 엔티티
      Item findItem = em.find(Item.class, itemParam.getId()); //같은 엔티티를 조회한다.
      findItem.setPrice(itemParam.getPrice()); //데이터를 수정한다.
}
```
+ 영속성 컨텍스트에서 엔티티를 다시 조회한 후에 데이터를 수정하는 방법
+ 트랜잭션 안에서 엔티티를 다시 조회, 변경할 값 선택 -> 트랜잭션 커밋 시점에 변경 감지(Dirty Checking)이 동작해서 데이터베이스에 UPDATE SQL 실행

### 병합 사용
```java
@Transactional
void update(Item itemParam) { //itemParam: 파리미터로 넘어온 준영속 상태의 엔티티
      Item mergeItem = em.merge(itemParam);
}
```
+ 병합은 준영속 상태의 엔티티를 영속 상태로 변경할 때 사용하는 기능이다.

### 가장 좋은 해결 방법
**엔티티를 변경할 때는 항상 변경 감지를 사용하자**
+ 컨트롤러에서 어설프게 엔티티를 생성하지 말자.
+ 트랜잭션이 있는 서비스 계층에 식별자(id)와 변경할 데이터를 명확하게 전달하자.(파라미터 or dto)
+ 트랜잭션이 있는 서비스 계층에서 영속 상태의 엔티티를 조회하고, 엔티티의 데이터를 직접 변경하자.
+ 트랜잭션 커밋 시점에 변경 감지가 실행된다.

## 지연 로딩과 조회 성능 최적화
**목차**
+ [엔티티를 직접 노출하면 좋지 않다](#엔티티를-직접-노출하면-좋지-않다)

### 엔티티를 직접 노출하면 좋지 않다
```java
@PostMapping("/api/v1/members")
public CreateMemberResponse saveMemberV1(@RequestBody @Valid Member member) {
   Long id = memberService.join(member);
   return new CreateMemberResponse(id);
}
```
**엔티티를 Request Body에 직접 매핑**
+ 문제점
  + 엔티티에 프레젠테이션 계층을 위한 로직이 추가된다.
  + 엔티티에 API 검증을 위한 로직이 들어간다.(@NotEmpty 등등)
  + 실무에서는 회원 엔티티를 위한 API가 다양하게 만들어지는데, 한 엔티티에 각각의 API를 위한 모든 요청 요구사항을 담기는 어렵다.
  + 엔티티가 변경되면 API 스펙이 변한다.
+ 결론
  + API 요청 스펙에 맞추어 별도의 DTO 파라미터로 받는다.
+ 참고 : 실무에서는 엔티티를 API 스펙에 노출하면 안된다.

```java
@GetMapping("/api/v1/members")
public List<Member> membersV1() {
   return memberService.findMembers();
}
```
**응답 값으로 엔티티를 직접 외부에 노출**
+ 문제점
 + 엔티티에 프레젠테이션 계층을 위한 로직이 추가된다.
 + 기본적으로 엔티티의 모든 값이 노출된다.
 + 응답 스펙을 맞추기 위해 로직이 추가된다.(@JsonIgnore, 별도의 뷰 로직 등등)
 + 실무에서는 같은 엔티티에 대해 API 가 용도에 따라 다양하게 만들어지는데, 한 엔티티에 각각의 API 를 위한 프레젠테이션 응답 로직을 담기는 어렵다.
 + 엔티티가 변경되면 API 스펙이 변한다.
 + 추가로 컬렉션을 직접 반환하면 향후 API 스펙을 변경하기 어렵다.(별도의 Result 클래스 생성으로 해결)
+ 결론
 + API 응답 스펙에 맞추어 별도의 DTO 를 반환한다.

출처 - [실전! 스프링 부트와 JPA 활용1 - 웹 어플리케이션 개발](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-%ED%99%9C%EC%9A%A9-1/dashboard)
출처 - [실전! 스프링 부트와 JPA 활용2 - API 개발과 성능 최적화](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-API%EA%B0%9C%EB%B0%9C-%EC%84%B1%EB%8A%A5%EC%B5%9C%EC%A0%81%ED%99%94/dashboard)
