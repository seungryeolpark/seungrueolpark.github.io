---
title: "데이터베이스"
categories: JP_TI
---

## DBMS, RDBMS
### DBMS
+ DBMS는 데이터베이스 관리 시스템으로 널리 사용되는 DBMS 중 일부는 MySql, Oracle 등이 있습니다.
+ 사용자가 데이터에 관한 정보를 가능한 한 효율적이고 효과적으로 구성, 복원 및 검색할 수 있도록 하는 응용프로그램 모음입니다.

### RDBMS
+ RDBMS는 관계형 데이터베이스 관리 시스템으로 별도의 테이블에 저장된 관계형 데이터 모델을 기반으로 공통 열의 사용과 관련이 있습니다.
+ SQL(Structed Query Language)을 사용하여 관계형 데이터베이스에서 데이터에 쉽게 엑세스 할 수 있습니다.

### DBMS 장점
+ 데이터는 구조적으로 저장되므로 중복성이 제어된다.
+ 입력한 데이터의 유효성을 검사하고 데이터베이스에 대한 무단 엑세스에 대한 제한을 제공한다.
+ 필요한 경우 데이터 백업 및 복구를 제공한다.
+ 여러 사용자 인터페이스를 제공한다.

### 스키마(Schema)
+ 데이터베이스의 전체적인 구조와 제약조건에 대한 명세를 기술 정의한 것

## 데이터베이스 다양한 유형의 관계
### 일대일
![데이터베이스1](https://user-images.githubusercontent.com/48073115/127255627-79437f9a-4c30-481b-9e74-4396dec240b6.png)

### 일대다
![데이터베이스2](https://user-images.githubusercontent.com/48073115/127255694-ce8831d1-63ec-41dc-a703-b1572a318830.png)
+ 부모 테이블의 PK 를 자식 테이블에 FK 로 집어 넣어 관계를 표현한다.

### 다대다
![데이터베이스3](https://user-images.githubusercontent.com/48073115/127255838-99f62ed7-c21b-4eb3-8726-cbc4d8a6e0f0.png)
+ 서로의 PK를 자신의 외래키 컬럼으로 갖고 있다.
+ 일반적으로 다대다 관계는 두 테이블의 대표키를 컬럼으로 갖는 또 다른 테이블을 생성해서 관리한다.

### PK(Primary Key)
+ 각 엔티티를 식별할 수 있는 대표키
+ 테이블에서 중복되지 않는 값(Unique), Null 일 수 없다.

### FK(Foreign Key)
+ 다른 테이블의 기본키를 참조
+ 모든 필드는 참조하는 기본키와 동일한 도메인을 갖는다.
+ 모든 필드 값은 참조하는 기본키와 동일하거나 Null 일 수 있다.

## SQL
### SQL(Structed Query Language)
관계형 데이터베이스 관리 시스템의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어이다.

### DDL(데이터 정의 언어)
+ 이 명령은 데이터를 보유하는 구조를 정의하는데 사용합니다.
+ 이 명령은 자동 커밋 됩니다. 즉, 데이터베이스의 DDL 명령에 의해 수행된 변경 사항이 영구적으로 저장됩니다.

### DML(데이터 조작 언어)
+ 이 명령은 데이터베이스의 데이터를 조작하는데 사용합니다.
+ 이 명령은 자동 커밋되지 않으며 롤백할 수 있습니다.

### DCL(데이터 제어 언어)
+ 이 명령은 데이터베이스에서 데이터의 가시성을 제어하는데 사용합니다.
+ 일반적으로 데이터베이스에서 데이터를 사용하기위한 엑세스 권한여부를 주는데 사용합니다.

## 정규화, 비정규화
### 정규화
+ 데이터 무결성을 유지하기 위해 잘 정의된 방식으로 테이블을 분할하여 데이터베이스에서 중복 데이터를 제거하는 프로세스
+ 관계형 데이터베이스에서 중복을 최소화하기 위해 데이터를 구조화하는 작업
+ 장점
  + 많은 저장 공간을 절약한다.
  + 데이터베이스 변경시 이상 현상을 제거하고, 데이터베이스 구조 확장 시 재디자인을 최소화한다.
+ 단점
  + 릴레이션 분해로 인해 릴레이션 간의 연산(join)이 많아집니다. 이로 인해 응답 시간이 느려질 수 있다.

### 비정규화
+ 복잡한 쿼리 속도를 높이고 성능을 향상시키기 위해 테이블에 중복 데이터를 추가하는 프로세스

## 데이터베이스 뷰
+ 허용된 데이터를 제한적으로 보여주기 위해 하나 이상의 테이블에서 유도된 가상 테이블
+ 정의된 기본 테이블이 삭제되면 뷰도 자동적으로 삭제된다.
+ 검색은 일반 테이블과 동일한 방식으로 한다.
+ 뷰에 대한 삽입, 삭제, 갱신에 대한 제약이 따른다. 컬럼에 기본키가 포함되어 있지 않으면 삽입, 갱신, 삭제가 되지 않는다.
+ 장점
  + 뷰의 데이터가 저장되는 물리적 위치가 없으므로 리소스를 낭비하지 않고 출력을 생성한다.
  + 삽입, 업데이트 및 삭제와 같은 명령을 허용하지 않으므로 데이터 액세스가 제한된다.
  + 논리적 독립성을 제공하고 데이터 접근 제어로부터 보안성을 향상시킴
+ 단점
  + 해당 뷰와 관련된 테이블을 삭제하면 뷰가 관련이 없다.
  + 큰 테이블에 대해 뷰를 만들 때 더 많은 메모리가 사용된다.
  + 한번 정의된 뷰는 변경할 수 없으며, 삭제한 후 다시 생성해야 한다.(replace)

## ER 모델
+ 데이터베이스의 개념적 뷰를 정의하는 엔티티-관계 모델
+ 기본적으로 실제 실체와 그 연관 관계를 보여준다.

### 엔티티(Entity)
+ 실세계에서 독립적으로 존재하는 장소, 클래스 또는 객체일 수 있다.

### 엔티티 타입(Entity type)
+ 유사한 특성을 가진 엔티티 집합

### 엔티티 집합(Entity set)
+ 데이터베이스에 설정된 엔티티는 특정 엔티티 유형을 갖는 엔티티의 집합을 나타낸다.

## 트랜잭션
+ 데이터베이스의 일관성있는 상태를 다른 것으로 변경하는 작업 순서를 데이터베이스 트랜잭션이라고 한다.
+ 트랜잭션 완료후 성공하면 시스템에 반영되거나 실패하면 변경 사항이 반영되지 않습니다.

### 트랜잭션 4가지 성질
+ 원자성
  + 트랜잭션의 연산이 DB에 모두 반영되던지 전혀 반영이 되지 않던지 둘중에 하나만 수행한다.
+ 일관성
  + 트랜잭션이 성공적으로 완료된 후에는 언제나 일관성 있는 DB상태로 변환되어야 한다.
+ 독립성
  + 수행중인 트랜잭션이 완전히 완료되기 전에는 다른 트랜잭션에서 수행 결과를 참조할 수 없다.
+ 지속성
  + 성공적으로 완료된 트랜잭션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 한다.

## 인덱스
+ 데이터분야에 있어서 테이블에 대한 동작의 속도를 높여주는 자료구조
+ 인덱스는 테이블 내의 1개의 컬럼, 혹은 여러 개의 컬럼을 이용하여 생성될 수 있다.
+ 고속의 검색 동작 뿐만 아니라 레코드 접근과 관련하여 효율적인 순서 매김 동작에 대한 기초를 제공한다.

### 인덱스를 사용해야 하는 경우
+ 데이터의 양이 많고 검색이 변경보다 빈번한 경우
+ 인덱스를 걸고자 하는 필드의 값이 다양한 값을 가지는 경우

### 인덱스를 사용할 시 단점
+ DB의 10% 정도 공간이 요구된다.
+ 인덱스를 생성하는 시간이 크게 요구된다.
+ INSERT, DELETE, UPDATE 쿼리문을 실행할 때 별도의 과정이 추가적으로 발생하기 때문에 DB의 변경작업이 잦으면 성능이 저하된다.

### 인덱스 생성시 고려할 사항
+ 테이블의 전체 데이터중 적은 양을 조회할 때 사용한다.
+ 테이블에 데이터가 적을수록 인덱스의 효율은 떨어진다.
+ 데이터의 유일성이 높을수록, 데이터의 범위가 넓을수록 인덱스의 효율은 올라간다.
+ Null이 적은 칼럼이 인덱스 효율이 좋다.
+ 결합 인덱스의 경우 자주 사용되는 컬럼을 앞쪽에 배치한다.

### 결합 인덱스
+ 인덱스를 생성할 때 두 개 이상의 컬럼을 합쳐서 인덱스를 만드는 것

### 인덱스 헌팅
+ 인덱스 수집을 향상시켜 데이터베이스 성능뿐만 아니라 쿼리 성능을 향상시키는 프로세스

### 인덱스 헌팅을 사용하여 쿼리 성능을 향상시키는 방법
+ 쿼리 최적화 프로그램을 사용하여 워크로드와 쿼리를 조정한다.
+ 인덱스 및 쿼리 배포의 성능 및 효과 관찰

## 검사점(Checkpoint)
+ 모든 로그가 저장 디스크에 영구적으로 저장되고 일관성이 없는 지점을 선언한다.
+ 충돌이 발생하면 시스템이 검사점에서 다시 시작할 수 있으므로 작업량과 시간이 절약된다.

## 데이터 사전(Data dictionary)
+ 테이블과 데이터베이스 개체의 내용과 구조를 설명하는 정보 집합
+ 데이터 딕셔너리에 저장된 정보의 작업은 데이터베이스 요소 간의 관계를 제어, 조작 및 엑세스를 한다.

## 기본 키(Primary Key), 복합 키(Compound Key)
### 기본 키(Primary Key)
+ 모든 행 데이터가 고유하게 식별된는 테이블의 해당 열
+ 테이블의 모든 행에는 기본 키가 있어야하며 두 행은 동일한 기본 키를 가질 수 없다.
+ 기본 키 값은 절대로 null이거나 수정하거나 업데이트 할 수 없다.

### 복합 키(Compound Key)
+ 기본 키가 되지 못하는 컬럼들을 서로 묶어서 기본 키처럼 사용하는 것

**기본키를 만드는 것이 중요하며, 복합키 또한 최대한 컬럼을 적게 묶는 것이 중요하다**

## Unique 키
+ Unique 키는 유일성을 가지기 위해 설정해 놓은 키로 중복이 되는 것을 방지한다.
+ Primary 키는 오직 하나만 생성할 수 있지만, Unique 키는 여러개 생성이 가능하다.
+ Primary 키의 경우 Null 값을 허용하지 않지만, Unique 키는 Null 값을 허용한다.
+ 
## 저장 프로시저
+ 사전 컴파일된 SQL 쿼리 모음으로 사전에 준비해둔 많은 명령을 자동으로 실행할 수 있기 때문에 작업의 효율성도 높일 수 있다.

## GROUP BY, DISTINCT, WHERE, HAVING
### GROUP BY
+ 데이터들을 원하는 그룹으로 나눌 수 있다.
+ 집계함수를 사용하여 특정 그룹으로 구분할 수 있다.

### DISTINCT
+ 중복된 데이터를 제거할 수 있다.

### WHERE
+ SELECT 할 데이터에 조건을 준다.

### HAVING
+ 집계함수를 가지고 조건비교를 할 때 사용한다.
+ GROUP BY 절과 함깨 사용한다.

## DELETE, TRUNCATE, DROP
### DELETE
+ 데이터만 삭제하고 테이블 용량은 줄어 들지 않는다.
+ Commit 이전에는 Rollback 이 가능하다.
+ 롤백 정보를 기록하므로 TRUNCATE 에 비해서 느리다.

### TRUNCATE
+ 테이블을 최초 생성된 초기상태로 만든다.
+ 용량이 줄어들고 인덱스 등도 모두 삭제된다.
+ Rollback 이 불가능하다.
+ 무조건 전체 삭제만 가능하다.

### DROP
+ 테이블을 완전히 삭제한다.
+ Rollback 이 불가능하다.

## 이상현상
+ 릴레이션에서 일부 속성들의 종속으로 인해 중복이 발생하는 것
+ 이상현상의 종류
  + 삽입 이상
    + 원하지 않는 자료가 삽입된다든지, 삽입하는데 자료가 부족해 삽입이 되지 않아 발생하는 문제점
  + 삭제 이상
    + 하나의 자료만 삭제하고 싶지만, 그 자료가 포함된 튜플 전체가 삭제됨으로 원하지 않는 정보 손실이 발생하는 문제점
  + 갱신 이상
    + 일부의 튜플만 갱신되어 정보가 모호해지거나 일관성이 없어져 정확한 정보 파악이 되지 않는 문제점

## 트리거
+ 자동으로 실행되도록 정의된 자동 프로시저
+ INSERT, UPDATE, DELETE 문에 대한 응답으로 자동 호출
+ 사용하는 이유 
  + 업무 규칙을 보장
  + 업무 처리 자동화
  + 데이터 무결성 강화(변경, 생성, 제거, 복구 시)

## 데이터베이스 무결성
+ 데이터 베이스에 저장된 데이터 값과 그것이 표현하는 현실 세계의 실제값이 일치하는 정확성

### 개체 무결성
+ 릴레이션에서 기본 키를 구성하는 속성은 Null 값이나 중복값을 가질 수 없다.

### 참조 무결성
+ 외래키 값은 Null 이거나 참조 테이블의 기본키 값이어야함

## 조인
+ 두 개 이상의 테이블이나 데이터베이스를 연결하여 데이터를 검색하는 방법
+ 조인의 종류
  + Inner Join
    + 2개 이상의 테이블에서 교집합만을 추출
  + Left Join
    + 왼쪽 테이블을 중심으로 오른쪽 테이블을 매치시킨다.
    + 왼쪽은 무조건 표시하고, 매치되는 레코드가 오른쪽에 없으면 Null 을 표시한다.
  + Right Join
    + 오른쪽 테이블을 중심으로 왼쪽 테이블을 매치시킨다.
    + 오른쪽은 무조건 표시하고, 매치되는 레코드가 왼쪽에 없으면 Null 을 표시한다.
  + Outer Join
    + 조건에 부합되지 않는 행까지도 포함시켜 결합한다.

## 교착상태
+ 2개 이상의 트랜잭션이 특정 자원(테이블 또는 행)의 잠금(Lock)을 획득한 채 다른 트랜잭션이 소유하고 있는 잠금을 요구하면 아무리 기다려도 
상황이 바뀌지 않는 상태가 되는데 이를 **교착상태** 라고 한다.
+ 교착상태를 방지하기 위한 방법
  + 트랜잭션을 자주 커밋한다.
  + 정해진 순서로 테이블에 접근한다.
  + SELECT ~ FOR UPDATE 의 사용을 피한다.

## NoSQL
+ 스키마가 없다. 즉 데이터 관계와 정해진 규격(table-column의 정의)가 없다.
+ 관계 정의가 없으니 Join이 불가능하다.(하지만 reference와 같은 기능으로 비슷하게 구현 가능) 트랜잭션을 지원하지 않는다.
+ 분산처리(수평적 확장)의 기능을 쉽게 제공한다.
+ 대부분의 NoSQL DB는 분산처리기능을 목적으로 나왔기 때문에 분산처리 기능을 자체 프레임워크에 포함하고 있다.
+ 비정형 데이터를 저장해야할 때 쓰기 가장 적합하다.

출처 - [데이터베이스DB 면접 예상 질문과 답변](https://hyonee.tistory.com/41?category=913823)



