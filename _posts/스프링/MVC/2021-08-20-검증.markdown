---
title: 검증
categories: springMVC
---

## BindingResult
+ Validator 를 상속받는 클래스에서 객체 값을 검증하는 방식

### @ModelAttribute 에 바인딩 시 타입 오류가 발생한다면?
+ BindingResult 가 없으면 : 400 오류가 발생하면서 컨트롤러가 호출되지 않고, 오류 페이지로 이동한다.
+ BindingResult 가 있으면 : 오류 정보(FieldError)를 BindingResult 에 담아서 컨트롤러를 정상 호출한다.

### BindingResult 에 검증 오류를 적용하는 3가지 방법
1. @ModelAttribute 의 객체에 타입 오류 등으로 바인딩이 실패하는 경우 스프링이 FieldError 생성해서 BindingResult 에 넣어준다.
2. 개발자가 직접 넣어준다. -> rejectValue() 를 직접 호출
3. 스프링이 직접 검증 오류에 추가한 경우(주로 타입 정보가 맞지 않음) -> Validator 사용
  + 스프링은 타입 오류가 발생하면 typeMismatch 라는 오류 코드를 사용한다.
  + 이 오류 코드가 MessageCodesResolver 를 통하면서 4가지 메시지 코드를 생성한다.

### Validator
**Validator Interface**
```java
public interface Validator {
            boolean supports(Class<?> clazz);
            void validate(Object target, Errors errors);
}
```

+ support() : 해당 검증기를 지원하는 여부 확인
+ validate() : 검증 대상 객체와 BindingResult

### 필드 오류 - FieldError
**FieldError 생성자 요약**

```java
public FieldError(String objectName, String field, String defaultMessage);
```

+ 필드에 오류가 있으면 FieldError 객체를 생성해서 BindingResult 에 담가두면 된다.
+ objectName : @ModelAttribute 이름
+ field : 오류가 발생한 필드 이름
+ defaultMessage : 오류 기본 메시지

```java
public FieldError(String objectName, String field, @Nullable Object 
            rejectedValue, boolean bindingFailure, @Nullable String[] codes, @Nullable
            Object[] arguments, @Nullable String defaultMessage)
```

+ rejectedValue : 사용자가 입력한 값(거절된 값)
+ bindingFailure : 타입 오류 같은 바인딩 실패인지, 검증 실패인지 구분 값
+ codes : 메시지 코드
+ arguments : 메시지에서 사용하는 인자
+ defaultMessage : 기본 오류 메시지

### 글로벌 오류 - ObjectError
**ObjectError 생성자 요약**
```java
public ObjectError(String objectName, String defaultMessage);
```

+ 특정 필드를 넘어서는 오류가 있으면 ObjectError 객체를 생성해서 BindingResult 에 담가두면 된다.
+ objectName : @ModelAttribute 이름
+ defaultMessage : 오류 기본 

### rejectValue(), reject()
**rejectValue 생성자 요약**
```java
void rejectValue(@Nullable String field, String errorCode,
            @Nullable Object[] errorArgs, @Nullable String defaultMessage);
```

**reject 생성자 요약**
```java
void reject(String errorCode, @Nullable Object[] errorArgs, @Nullable String 
            defaultMessage);
```

+ field : 오류 필드명
+ errorCode : 오류 코드(이 오류 코드는 메시지에 등록된 코드가 아니다. messageResolver를 위한 오류 코드이다.)
+ errorArgs : 오류 메시지에서 {0} 을 취환하기 위한 값
+ defaultMessage : 오류 메시지를 찾을 수 없을 때 사용하는 기본 메시지

### MessageCodesResolver
+ 검증 오류 코드로 메시지 코드들을 생성한다.
+ MessageCodesResolver 인터페이스이고 DefaultMessageCodesResolver 는 기본 구현체이다.
+ 주로 ObjectError, FieldError 와 함께 사용한다.

### DefaultMessageCodesResolver 의 기본 메시지 생성 규칙
**객체 오류**
+ 객체 오류의 경우 다음 순서로 2가지 생성
  1. code + "." + obejct name
  2. code

**필드 오류**
+ 필드 오류의 경우 다음 순서로 4가지 생성
  1. code + "." + object name + "." + field
  2. code + "." + field
  3. code + "." + field type
  4. code

+ 구체적인 것에서 덜 구체적인 순서대로 찾는다.
+ 못찾으면 코드에 작성한 디폴트 메시지를 사용한다.

**동작 방식**
+ rejectValue(), reject() 는 내부에서 MessageCodesResolver 를 사용한다. 여기에서 메시지 코드들을 생성한다.
+ FieldError, ObjectError 의 생성자를 보면, 오류 코드를 하나가 아니라 여러 오류 코드를 가질 수 있다.
+ MessageCodesResolver 를 통해서 생성된 순서대로 오류 코드를 보관한다.

**Field Error** rejectValue("itemName", "required") //object name : item
+ 다음 4가지 오류 코드를 자동으로 생성
+ required.item.itemName
+ required.itemName
+ required.java.lang.String
+ required

**Object Error** reject("totalPriceMin") //object name : item
+ 다음 2가지 오류 코드를 자동으로 생성
+ totalPriceMin.item
+ totalPriceMin

### ValidationUtils
**ValidationUtils 사용 전**
```java
if (!StringUtils.hasText(item.getItemName())) {
             bindingResult.rejectValue("itemName", "required", "기본: 상품 이름은
            필수입니다.");
}
```

**ValidationUtils 사용 후**
```java
ValidationUtils.rejectIfEmptyOrWhitespace(bindingResult, "itemName",
"required");
```

+ 다음과 같이 한줄로 가능, 제공하는 기능은 Empty, 공백 같은 단순한 기능만 제공

### 주의
+ BindingResult bindingResult 파라미터의 위치는 @ModelAttribute 다음에 와야 한다.

```java
public String addMember(
            @ModelAttribute signupMember signupMember,
            BindingResult bindingResult)
```

+ BindingResult 는 Model 에 자동으로 포함된다.

### errors 메시지 파일 생성
**application.yml**
```yml
spring:
  messages:
    basename: messages, errors
```

**errors.properties**
```properties
required.signupMember.loginId = 아이디는 필수 값 입니다.
```

**적용**
```java
public String addMember(
            @ModelAttribute signupMember signupMember,
            BindingResult bindingResult) {
            
             if (!StringUtils.hasText(signupMember.getLoginId())) {
            bindingResult.rejectValue("loginId", "required");
            }
```

출처 - [스프링 MVC 2편 - 백엔드 웹 개발 활용 기술](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-2/dashboard)
