---
title: 빈 스코프
categories: springBase
---

## 빈 스코프
+ 스프링 빈이 스프링 컨테이너의 시작과 함깨 생성되어 스프링 컨테이너가 종료될 때 까지 유지한다.
+ 이것은 기본적으로 스프링 빈이 싱글톤 스코프로 생성되기 때문이다. **스코프는 빈이 존재할 수 있는 범위를 뜻한다.**
+ **스프링은 다음과 같은 다양한 스코프를 지원한다.**
  + 싱글톤 : 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.
  + 프로토타입 : 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프이다.
  + 웹 관련 스코프
    + request : 웹 요청이 들어고 나갈때 까지 유지되는 스코프이다.
    + session : 웹 세션이 생성되고 종료될 때 까지 유지되는 스코프이다.
    + application: 웹의 서블릿 컨텍스와 같은 범위로 유지되는 스코프이다.

### 빈 스코프의 지정코드
**컴포넌트 스캔 자동 등록**

```java
@Scope("prototype")
@Component
public class HelloBean {}
```

**수동 등록**

```java
@Scopre("prototype")
@Bean
PrototypeBean HelloBean() {
  return new HelloBean();
}
```

## 싱글톤 스코프
싱글톤 스코프의 빈을 조회하면 스프링 컨테이너는 항상 같은 인스턴스의 스프링 빈을 반환한다.

![빈 스코프1](https://user-images.githubusercontent.com/48073115/126846892-01094599-8c86-452e-bc30-44bdfabe602e.png)

1. 싱글톤 스코프의 빈을 스프링 컨테이너에 요청한다.
2. 스프링 컨테이너는 본인이 관리하는 스프링 빈을 반환한다.
3. 이후에 스프링 컨테이너에 같은 요청이 와도 같은 객체 인스턴스의 스프링 빈을 반환한다.

## 프로토타입 스코프
프로토타입 스코프를 스프링 컨테이너에 조회하면 스프링 컨테이너는 항상 새로운 인스턴스를 생성해서 반환한다.

![빈 스코프2](https://user-images.githubusercontent.com/48073115/126845444-d7191af6-0964-4647-b4c1-bbb98b29e0be.png)

1. 프로토타입 스코프의 빈을 스프링 컨테이너에 요청한다.
2. 스프링 컨테이너는 이 시점에 프로토타입 빈을 생성하고 필요한 의존관계를 주입한다.

![빈 스코프3](https://user-images.githubusercontent.com/48073115/126846938-75e26734-5c0c-4507-9620-574acf6be63f.png)

3. 스프링 컨테이너는 생성한 프로토타입 빈을 클라이언트에 반환한다.
4. 이후에 스프링 컨테이너에 같은 요청이 오면 항상 새로운 프로토타입 빈을 생성해서 반환한다.

**핵심은 스프링 컨테이너는 프로토타입 빈을 생성하고 의존관계 주입, 초기화까지만 처리한다는 것이다.** 
클라이언트에 빈을 반환하고 이후 스프링 컨테이너는 생성된 프로토타입 빈을 관리하지 않는다. 
프로토타입 빈을 관리할 책임은 프로토타입 빈을 받은 클라이언트에 있다. 
그래서 @PreDestroy 같은 종료 메서드가 호출되지 않는다.

### 프로토타입 빈의 특징 정리
+ 스프링 컨테이너에 요청할 때 마다 새로 생성된다.
+ 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입 그리고 초기화까지만 관여한다.
+ 종료 메서드가 호출되지 않는다.
+ 그래서 프로토타입 빈은 프로토타입 빈을 조회한 클라이언트가 관리해야 한다. 종료 메서드에 대한 호출도 클라이언트가 직접 해야한다.

## 프로토타입 스코프 - 싱글톤 빈과 함께 사용시 문제점

### 프로토타입 빈 직접 요청
스프링 컨테이너에 프로토타입 빈을 직접 요청하는 예를 보자.

**스프링 컨테이너에 프로토타입 빈 직접 요청1**

![빈 스코프4](https://user-images.githubusercontent.com/48073115/126847047-9fbc0bcb-d72e-4300-8207-f1ba0a1b5be3.png)

1. 클라이언트A는 스프링 컨테이너에 프로토타입 빈을 요청한다.
2. 스프링 컨테이너는 프로토타입 빈을 새로 생성해서 반환(x01)한다. 해당 빈의 count 필드 값은 0이다.
3. 클라이언트는 조회한 프로토타입 빈에 addCount() 를 호출하면서 count 필드를 +1 한다. 
결과적으로 프로토타입 빈(x01)의 count는 1이 된다.

**스프링 컨테이너에 프로토타입 빈 직접 요청2**

![빈 스코프5](https://user-images.githubusercontent.com/48073115/126847377-db05733f-62e3-47f1-a4f3-986266d4a2ba.png)

1. 클라이언트B는 스프링 컨테이너에 프로토타입 빈을 요청한다.
2. 스프링 컨테이너는 프로토타입 빈을 새로 생성해서 반환(x02)한다. 해당 빈의 count 필드 값은 0이다.
3. 클라이언트는 조회한 프로토타입 빈에 addCount() 를 호출하면서 count 필드를 +1 한다. 
결과적으로 프로토타입 빈(x02)의 count는 1이 된다.

### 싱글톤 빈에서 프로토타입 빈 사용
이번에는 clientBean 이라는 싱글톤 빈이 의존관계 주입을 통해서 프로토타입 빈을 주입받아서 사용하는 예를 보자.

**싱글톤에서 프로토타입 빈 사용1**

![빈 스코프6](https://user-images.githubusercontent.com/48073115/126847662-ff0fd76e-9190-4af9-b257-5fdefd83a943.png)

+ clientBean 은 싱글톤이므로 보통 스프링 컨테이너 생성 시점과 함깨 생성되고 의존관계 주입도 발생한다.
+ 1. clientBean 은 의존관계 자동주입을 사용한다. 주입 시점에 스프링 컨테이너에 프로토타입 빈을 요청한다.
+ 2. 스프링 컨테이너는 프로토타입 빈을 생성해서 clientBean 에 반환한다. 프로토타입 빈의 count 필드 값은 0이다.
+ 이제 clientBean 은 프로토타입 빈을 내부 필드에 보관한다. (정확히는 참조값을 보관한다.)

**싱글톤에서 프로토타입 빈 사용2**

![빈 스코프7](https://user-images.githubusercontent.com/48073115/126847879-d2a77992-1bb8-4512-9327-fa6fc0a15c03.png)

+ 클라이언트 A는 clientBean 을 스프링 컨테이너에 요청해서 받는다. 싱글톤이므로 항상 같은 clientBean 이 반환된다.
+ 3. 클라이언트 A는 clientBean.logic() 을 호출한다.
+ 4. clientBean 은 prototypeBean 의 addCount() 를 호출해서 프로토타입 빈의 count 를 증가한다. count 값이 1이 된다.

**싱글톤에서 프로토타입 빈 사용3**

![빈 스코프8](https://user-images.githubusercontent.com/48073115/126848014-b1b02c6d-afe8-497a-9580-8228a506fecf.png)

+ 클라이언트 B는 clientBean 을 스프링 컨테이너에 요청해서 받는다. 싱글톤이므로 항상 같은 clientBean 이 반환된다.
+ **clientBean 이 내부에 가지고 있는 프로토타입 빈은 이미 과거에 주입이 끝난 빈이다. 주입 시점에 스프링 컨테이너에 요청해서 프로토 타입 빈이 새로 생성이 된 것이지, 사용 할 때마다 새로 생성되는 것이 아니다.**
+ 5. 클라이언트 B는 clientBean.logic() 을 호출한다.
+ 6. clientBean 은 prototypeBean 의 addCount() 를 호출해서 프로토타입 빈의 count 를 증가한다. 원래 count 값이 1이었으므로 2가 된다.

스프링은 일반적으로 싱글톤 빈을 사용하므로 싱글톤 빈이 프로토타입 빈을 사용하게 된다. 
그런데 싱글톤 빈은 생성 시점에서만 의존관계 주입을 받기 때문에 프로토타입 빈이 새로 생성되기는 하지만 싱글톤 빈과 함께 계속 유지되는 것이 문제다.  
프로토타입 빈을 주입 시점에서만 새로 생성하는게 아니라, 사용할 때 마다 새로 생성해서 사용하는 것을 원할 것이다.

**여러 빈에서 같은 프로토타입 빈을 주입 받으면, 주입 받는 시점에 각각 새로운 프로토타입 빈이 생성된다.**
+ clientA -> prototypeBean@x01
+ clientB -> prototypeBean@x02
물론 사용할 때 마다 새로 생성되는 것은 아니다.

## 프로토타입 스코프 - 싱글톤 빈과 함께 사용시 Provider로 문제 해결
싱글톤 빈과 프로토 타입 빈을 함꼐 사용할 때, 어떻게 하면 사용할 때 마다 항상 새로운 프로토타입 빈을 생성할 수 있을까?

### 스프링 컨테이너에 요청
가장 간단한 방법은 싱글톤 빈이 프로토타입을 사용할 때 마다 스프링 컨테이너에 새로 요청하는 것이다.

```java
@Scope("prototype")
static class PrototypeBean {
  private int count = 0;
  
  public void addCount() {
    count++;
  }
  
  public int getCount() {
    return count;
  }
  
  @PostConstruct
  public void init() {
    System.out.println("PrototypeBean.init " + this);
  }
  
  @PreDestroy
  public void destroy() {
    System.out.println("PrototypeBean.destroy");
  }
}
```

```java
@Autowired
private ApplicationContext ac;

public int logic() {
  PrototypeBean prototypeBean = ac.getBean(PrototypeBean.class);
  prototypeBean.addCount();
  int count = prototypeBean.getCount();
  return count;
}
```

+ 실행해보면 ac.getBean() 을 통해서 항상 새로운 프로토타입 빈이 생성되는 것을 확인할 수 있다.
+ 의존관계를 외부에서 주입(DI)받는게 아니라 직접 필요한 의존관계를 찾는 것을 Dependency Lookup(DL) 의존관계 조회(탐색)이라 한다.
+ 그런데 이렇게 스프링의 애플리케이션 컨택스트 전체를 주입받게 되면, 스프링 컨테이너에 종속적인 코드가 되고 단위 테스트도 어려워진다.
+ 지금 필요한 기능은 프로토타입 빈을 컨테이너에서 대신 찾아주는 DL 정도의 기능만 제공하는 무언가가 있으면 된다.

### ObjectFactory, ObjectProvider
ObjectProvider는 지정한 빈을 컨테이너에서 대신 찾아주는 DL 서비스를 제공한다. 
참고로 과거에는 ObjectFactory가 있었는데, 여기에 편의 기능을 추가해서 ObjectProvider 가 만들어졌다.

```java
@Autowired
private ObjectProvider<PrototypeBean> prototypeBeanProvider;

public int logic() {
  PrototypeBean prototypeBean = prototypeBeanProvider.getObject();
  prototypeBean.addCount();
  int count = prototypeBean.getCount();
  return count;
}
```

+ 실행해보면 prototypeBeanProvider.getObject() 을 통해서 항상 새로운 프로토타입 빈이 생성되는 것을 확인할 수 있다.
+ ObjectProvider 의 getObject() 를 호출하면 내부에서는 스프링 컨테이너를 통해 해당 빈을 찾아서 반환한다.(DL)
+ 스프링이 제공하는 기능을 사용하지만, 기능이 단순하므로 단위테스트를 만들거나 mock 코드를 만들기는 훨씬 쉬워진다.
+ ObjectProvider 는 지금 딱 필요한 DL 정도의 기능만 제공한다.
+ **특징**
  + ObjectFactory : 기능이 단순, 별도의 라이브러리 필요 없음, 스프링에 의존
  + ObjectProvider : ObjectFactory 상속, 옵션, 스트림 처리등 편의 기능이 많고, 별도의 라이브러리 필요 없음, 스프링에 의존

### JSR-330 Provider
javax.inject.Provider 라는 JSR-330 자바 표준을 사용하는 방법이다.

```java
package javax.inject;
public interface Provider<T> {
  T get();
}
```

```java
@Autowired
private Provider<PrototypeBean> provider;

public int logic() {
  PrototypeBean prototypeBean = provider.get();
  prototypeBean.addCount();
  int count = prototypeBean.getCount();
  return count;
}
```

+ 실행해보면 provider.get() 을 통해서 항상 새로운 프로토타입 빈이 생성되는 것을 확인할 수 있다.
+ provider 의 get() 을 호출하면 내부에서는 스프링 컨테이너를 통해 해당 빈을 찾아서 반환한다.(DL)
+ 자바 표준이고, 기능이 단순하므로 단위테스트를 만들거나 mock 코드를 만들기는 훨씬 쉬워진다.
+ Provider 는 지금 딱 필요한 DL 정도의 기능만 제공한다.
+ **특징**
  + get() 메서드 하나로 기능이 매우 단순하다.
  + 별도의 라이브러리가 필요하다.
  + 자바 표준이므로 스프링이 아닌 다른 컨테이너에서도 사용할 수 있다.

### 정리
+ 프로토타입 빈은 매번 사용할 때 마다 의존관계 주입이 완료된 새로운 객체가 필요할때 사용하면 된다.
+ 그런데 실무에서 웹 애플리케이션을 개발해보면, 싱글톤 빈으로 대부분의 문제를 해결할 수 있기 때문에 프로토타입 빈을 직접적으로 사용하는 일은 매우 드물다.
+ ObjectProvider, JSR330 Provider 등은 프로토타입 뿐만 아니라 DL이 필요한 경우는 언제든지 사용할 수 있다.
+ 특별히 다른 컨테이너를 사용할 일이 없다면 ObjectProvider, 그게 아니라면 JSR330 Provider 를 사용하면 된다.

## 웹 스코프
**웹 스코프의 특징**
+ 웹 스코프는 웹 환경에서만 동작한다.
+ 웹 스코프는 프로토타입과 다르게 스프링이 해당 스코프의 종료시점까지 관리한다. 따라서 종료 메서드가 호출된다.

**웹 스코프 종류**
+ request : HTTP 요청 하나가 들어고 나갈 때 까지 유지되는 스코프, 각각의 HTTP 요청마다 별도의 빈 인스턴스가 생성되고, 관리된다.
+ session : HTTP Session과 동일한 생명주기를 가지는 스코프
+ application : 서블릿 컨텍스트(ServletContext)와 동일한 생명주기를 가지는 스코프
+ websocket : 웹 소켓과 동일한 생명주기를 가지는 스코프

**HTTP request 요청 당 각각 할당되는 request 스코프

![빈 스코프9](https://user-images.githubusercontent.com/48073115/126854328-5e660de7-a760-4fae-b80e-0b3856c8f95d.png)

### request 스코프 예제 개발
다음과 같이 로그가 남도록 request 스코프를 활용해서 추가 기능을 개발해보자.  

[d06b992f...] request scope bean create
[d06b992f...][http://localhost:8080/log-demo] controller test
[d06b992f...][http://localhost:8080/log-demo] service id = testId
[d06b992f...] request scope bean close

+ 기대하는 공통 포멧 : [UUID][requestURL]{message}
+ UUID를 사용해서 HTTP 요청을 구분하자.
+ requestURL 정보도 추가로 넣어서 어떤 URL을 요청해서 남은 로그인지 확인하자.

코드 예시  
**MyLogger**
```java
@Component
@Scope(value = "request")
public class MyLogger {
    private String uuid;
    private String requestURL;
    
    public void setRequestURL(String requestURL) {
        this.requestURL = requestURL;
    }
    
    public void log(String message) {
        System.out.println("[" + uuid + "]" + "[" + requestURL + "] " + message);
    }
    
    @PostConstruct
    public void init() {
        uuid = UUID.randomUUID().toString();
        System.out.println("[" + uuid + "] request scope bean create : " + this);
    }
    
    @PreDestroy
    public void close() {
        System.out.println("[" + uuid + "] request scope bean close : " + this);
    }
}
```

+ 로그를 출력하기 위한 MyLogger 클래스이다.
+ @Scope(value = "request") 를 사용해서 request 스코프로 지정했다. 이제 이 빈은 HTTP 요청당 하나씩 생성되고 HTTP 요청이 끝나는 시점에 소멸된다.
+ 이 빈이 생성되는 시점에 자동으로 @PostConstruct 초기화 메서드를 사용해서 uuid를 생성해서 저장해둔다. 이 빈은 HTTP 요청당 하나씩 생성되므로, uuid를 저장해두면 다른 HTTP 요청과 구분할 수 있다.
+ 이 빈이 소멸되는 시점에 @PreDestroy 를 사용해서 종료 메시지를 남긴다.
+ requestURL 은 이 빈이 생성되는 시점에는 알 수 없으므로 외부에서 setter 로 입력받는다.

**LogDemoController**

```java
@Controller
@RequiredArgsConstructor
public class LogDemoController {
    private final LogDemoService logDemoService;
    private final MyLogger myLogger;
    
    @RequestMapping("log-demo")
    @ResponseBody
    public String logDemo(HttpServletRequest request) {
        String requestURL = request.getRequestURL().toString();
        myLogger.setRequestURL(requestURL);
        
        myLogger.log("controller test");
        logDemoService.logic("testId");
        return "OK";
    }
}
```

+ 로거가 잘 작동하는지 확인하는 테스트용 컨트롤러다.
+ 여기서 HttpServletRequest를 통해서 요청 URL을 받았다.
  + requestURL 값 http://localhost:8080/log-demo
+ 이렇게 받은 requestURL 값을 myLogger 에 저장해둔다. myLogger 는  HTTP 요청당 각각 구분되므로 다른 HTTP 요청 때문에 값이 섞이는 걱정은 하지 않아도 된다.
+ 컨트롤러에서 controller test 라는 로그를 남긴다.




