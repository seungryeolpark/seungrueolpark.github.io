---
title: 싱클톤 컨테이너
categories: springBase
---

## 싱글톤 패턴
+ 클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴
+ 그래서 객체 인스턴스를 2개 이상 생성하지 못하도록 막아야 한다.
  + private 생성자를 사용해서 외부에서 임의로 new 키워드를 사용하지 못하도록 막아야 한다.

예제 코드
```java
public class SingletonService {

  //1. static 영역에 객체를 딱 1개만 생성한다.
  private static final SingletonService instance = new SingletonService();
  
  //2. public으로 열어서 객체 인스턴스가 필요하며 이 static 메서드를 통해서만 조회하도록 허용한다.
  public static SingletonService getInstance() {
    return instance;
  }
  
  //3. 생성자를 private으로 선언해서 외부에서 new 키워드를 사용한 객체 생성을 못하게 막는다.
  private SingletonService() {
  }
}
```
+ private으로 new 키워드를 막아두었다.
+ 호출할 때 마다 같은 객체 인스턴스를 반환한다. -> 고객의 요청이 올 때 마다 객체를 생성하는 것이 아니라, 이미 만들어진 객체를 
공유해서 효율적으로 사용할 수 있다.

### 싱글톤 패턴 문제점
+ 싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.
+ getInstance 함수를 사용해야 한다. -> 의존관계상 클라이언트가 구체 클래스에 의존한다.
  + DIP 원칙을 위반한다.
  + OCP 원칙을 위반할 가능성이 높다.
+ 이미 설정이 끝난 지정된 인스턴스를 가져온다.
  + 테스트하기 어렵다.
  + 내부 속성을 변경하거나 초기화하기 어렵다.
+ private 생성자를 사용한다. -> 자식 클래스를 만들기 어렵다.
+ 결론적으로 유연성이 떨어진다.
+ 안티패턴이라 불리기도 한다.

## 싱글톤 컨테이너
+ 스프링 컨테이너는 싱글톤 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다.
+ 스프링 컨테이너는 싱글톤 컨테이너 역할을 한다. 이렇게 싱글톤 객체를 생성하고 관리하는 기능을 **싱글톤 레지스트리**라 한다.
+ 스프링 컨테이너의 이런 기능 덕분에 싱글톤 패턴의 모든 단점을 해결하면서 싱글톤으로 유지할 수 있다.
+ 싱글톤 패턴을 위한 지저분한 코드가 들어가지 않아도 된다.
+ DIP, OCP, 테스트, private 생성자로 부터 자유롭게 싱글톤을 사용할 수 있다.

![스프링 컨테이너1](https://user-images.githubusercontent.com/48073115/126391794-6940c31c-df99-4314-ab3d-f0051d6b28a6.png)
+ 스프링 컨테이너 덕분에 고객의 요청이 올 때 마다 객체를 생성하는 것이 아니라, 이미 만들어진 객체를 공유해서 효율적으로 재사용할 수 있다.
+ 스프링의 기본 빈 등록 방식은 싱글톤이지만, 싱글톤 방식만 지원하는 것은 아니다. 요청할 때 마다 새로운 객체를 생성해서 반환하는 기능도 제공한다.

### 싱글톤 방식의 주의점
+ 객체 인스턴스를 하나만 생성해서 공유하는 싱글톤 방식은 여러 클라이언트가 하나의 같은 객체 인스턴스를 공유하기 때문에 싱글톤 객체는 상태를 유지(stateful)하게 설계하면 안된다.
+ **무상태(stateless)로 설계해야 한다.**
  + 특정 클라이언트에 의존적인 필드가 있으면 안된다.
  + 특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다.
  + 가급적 읽기만 가능해야 한다.
  + 필드 대신에 자바에서 공유되지 않는 지역번수, 파라미터, ThreadLocal 등을 사용해야 한다.
+ 스프링 빈의 필드에 공유 값을 설정하면 정말 큰 장애가 발생할 수 있다.

## @Configuration과 싱글톤
+ @Configuration은 설정파일을 만들기 위한 애노테이션 or Bean을 등록하기 위한 애노테이션이다.
+ @Bean만 사용해도 스프링 빈으로 등록되지만, 싱글톤을 보장하지 않는다.
+ @Configuration을 사용해야 CGLIB를 사용해 싱글톤을 보장하기에 스프링 설정 정보는 항상 @Configuration을 사용하자.
+ CGLIB는 바이트코드 조작 라이브러리로 AppConfig를 상속받은 임의의 클래스로 만들고 그것을 스프링 빈으로 등록해서 싱글톤을 보장한다.

![스프링 컨테이너2](https://user-images.githubusercontent.com/48073115/126393858-0d0c6657-7bdf-4583-a96f-6ca4f91e3d1d.png)

출처 - [스프링 핵심 원리 - 기본편 ](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/dashboard)



