---
title: 의존관계 자동주입
categories: springBase
---

## 다양한 의존관계 주입 방법
+ 생성자 주입
+ 수정자 주입(setter 주입)
+ 필드 주입
+ 일반 메서드 주입

### 생성자 주입
+ 생성자를 통해서 의존관계를 주입 받는 방법
+ 특징
  + 생성자 호출시점에 딱 1번만 호출되는 것이 보장된다.
  + **불변, 필수** 의존관계에 사용

```java
@Component
public class OrderServiceImpl implements OrderService {
  private final MemberRepository memberRepository;
  private final DiscountPolicy discountPolicy;
  
  //생성자가 딱 1개만 있으면 @Autowired를 생략해도 자동 주입 된다.
  @Autowired
  public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy discountPolicy) {
    this.memberRepository = memberRepository;
    this.discountPolicy = discountPolicy;
  }
}
```

### 수정자 주입(setter 주입)
+ setter라 불리는 필드의 값을 변경하는 수정자 메서드를 통해서 의존관계를 주입하는 방법
+ 특징
  + **선택, 변경** 가능성이 있는 의존관계에 사용
  + 자바빈 프로퍼티 규약의 수정자 메서드 방식을 사용하는 방법이다.
  + 자바빈 프로퍼티 규약이란 필드의 값을 직접 변경하지 않고, setXxx, getXxx 라는 메서드를 통해서 값을 읽거나 수정하는 규칙

```java
@Component
public class OrderServiceImpl implements OrderService {
  private final MemberRepository memberRepository;
  private final DiscountPolicy discountPolicy;
  
  @Autowired
  public void setMemberRepository(MemberRepository memberRepository) {
    this.memberRepository = memberRepository;
  }
  
  @Autowired
  public void setDiscountPolicy(DiscountPolicy discountPolicy) {
    this.discountPolicy = discountPolicy;
  }
  //@Autowired(required = false)는 주입할 대상이 없어도 동작하게 한다.
}
```

### 필드 주입
+ 필드에 바로 주입하는 방법
+ 특징
  + 코드가 간결하지만 외부에서 변경이 불가능해 테스트하기 힘들다는 치명적인 단점이 있다.
  + DI 프레임워크가 없으면 아무것도 할 수 없다.
  + 사용 안하는 것을 권장한다.
    + 애플리케이션의 실제 코드와 관계 없는 테스트 코드
    + 스프링 설정을 목적으로 하는 @Configuration 같은 곳에서만 특별한 용도로 사용

```java
@Component
public class OrderServiceImpl implements OrderService {
  
  @Autowired
  private MemberRepository memberRepository;
  @Autowired
  private DiscountPolicy discountPolicy;
}
```
+ 순수한 자바 테스트 코드는 @Autowired가 동작하지 않는다. @SpringBootTest 처럼 스프링 컨테이너를 테스트에 통합되는 경우에만 가능하다.

### 일반 메서드 주입
+ 일반 메서드를 통해 주입 받을 수 있다.
+ 특징
  + 한번에 여러 필드를 주입 받을 수 있다.
  + 일반적으로 잘 사용하지 않는다.

```java
@Component
public class OrderServiceImpl implements OrderService {
  private MemberRepository memberRepository;
  private DiscountPolicy discountPolicy;

  @Autowired
  public void init(MemberRepository memberRepository, DiscountPolicy discountpolicy) {
    this.memberRepository = memberRepository;
    this.discountPolicy = discountPolicy;
  }
}
```
+ 의존관계 자동주입은 스프링 컨테이너가 관리하는 스프링 빈이어야 동작한다. 스프링 빈이 아닌 Member 같은 클래스에서 @Autowired 코드를 
적용해도 아무 기능도 동작하지 않는다.

### 생성자 주입 선택
과거에는 수정자 주입과 필드 주입을 많이 사용했지만, 최근에는 스프링을 포함한 DI 프레임워크 대부분이 생성자 주입을 권장한다. 
그 이유는 다음과 같다.

**1. 불변**
+ 대부분의 의존관계 주입은 한번 일어나면 애플리케이션 종료시점까지 의존관계를 변경할 일이 없다. 오히려 종료 전까지 변하면 안된다.(불변해야 한다)
+ 수정자 주입을 사용하면 setXxx 메서드를 Public으로 열어둬야 한다. (누군가 실수로 변경할 수도 있고 변경하면 안되는 메서드를 열어두는 것은 좋은 설계 방법이 아니다)
+ 생성자 주입은 객체를 생성할 때 딱 1번만 호출되므로 이후에 호출되는 일이 없다. -> 불변하게 설계할 수 있다.

**2. 누락**
+ 수정자 의존관계인 경우 의존관계 주입을 누락할 때, 실행은 되지만 실행 결과는 NPE(Null Point Excepiton)이 발생한다.
+ 생성자 주입을 사용하면 의존관계 주입을 누락할 때, **컴파일 오류**가 발생한다. 
그리고 IDE에서 바로 어떤 값을 필수로 주입해야 하는지 알 수 있다.

**3. final 키워드**
생성자 주입을 사용하면 final 키워드를 사용할 수 있다. 
그래서 생성자에서 혹시라도 값이 설정되지 않는 오류를 컴파일 시점에서 막아준다.

```java
@Component
public class OrderServiceImpl implements OrderService {
  private final MemberRepository memberRepository;
  private final DiscountPolicy discountPolicy;
  
  @Autowired
  public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy discountPolicy) {
    this.memberRepository = memberRepository;
  }
}
```
+ 필수 필드인 discountPolicy 에 값을 설정해야 하는데, 이 부분이 누락되었다. 자바는 컴파일 시점에 다음 오류를 발생시킨다.
+ java : variable discountPolicy might not have been initialized
+ **컴파일 오류는 세상에서 가장 빠르고, 좋은 오류다.**
+ 수정자 주입을 포함한 나머지 주입 방식은 모두 생성자 이후에 호출되므로, 필드에 final 키워드를 사용할 수 없다. 
오직 생성자 주입 방식만 final 키워드를 사용할 수 있다.

### 정리
+ 생성자 주입 방식을 선택하는 이유는 여러가지 있지만, 프레임워크에 의존하지 않고, 순수한 자바 언어의 특징을 잘 살리는 방법이기도 하다.
+ 기본으로 생성자 주입을 사용하고, 필수 값이 아닌 경우에는 수정자 주입 방식을 옵션으로 부여하면 된다. 
생성자 주입과 수정자 주입을 동시에 사용할 수 있다.
+ 항상 생성자 주입을 사용하고 가끔 옵션이 필요하면 수정자 주입을 사용하자. 필드 주입은 사용하지 않는게 좋다.

## 롬복과 최신 트랜드
+ 막상 개발을 해보면, 대부분 다 불변이다. 그래서 생성자에 final 키워드를 사용하게 된다.
+ 룸복 라이브러리가 제공하는 @RequiredArgsConstructor 기능을 사용하면 final이 붙은 필드를 모아서 생성자를 자동으로 만들어준다. 

```java
@Component
@RequiredArgsConstructor
public class OrderServiceImpl implements OrderService {
  //생성자 주입 코드와 동일하다
  //생성자가 한개만 있으면 @Autowired를 생략할 수 있다.
  private final MemberRepository memberRepository;
  private final DiscountPolicy discountPolicy;
}
```
+ 최근에는 생성자를 딱 1개 두고 @Autowired를 생략하는 방법을 주로 사용한다. 
여기에 Lombok 라이브러리의 @RequiredArgsConstructor 함깨 사용하면 기능은 다 제공하면서, 코드는 깔끔하게 사용할 수 있다.

## 옵션 처리
주입할 스프링 빈이 없어도 동작해야 할 때가 있다.  
그런데 @Autowired 만 사용하면 required 옵션의 기본 값이 true 로 되어 있어서 자동 주입 대상이 없으면 오류가 발생한다.

자동 주입 대상을 옵션으로 처리하는 방법은 다음과 같다.
+ @Autowired(required=false) : 자동 주입할 대상이 없으면 수정자 메서드 자체가 호출이 안됨
+ org.springframework.lang.@Nullable : 자동 주입할 대상이 없으면 null이 입력된다.
+ Optional<> : 자동 주입할 대상이 없으면 Optional.empty가 입력된다.

```java
//Member는 스프링 빈이 아니다.
//호출 안됨
@Autowired(required = false)
public void setNoBean1(Member member) {
  System.out.println("setNoBean1 = " + member);
}

//null 호출
@Autowired
public void setNoBean2(@Nullable Member member) {
  System.out.println("setNoBean2 = " + member);
}

//Optional.empty 호출
@Autowired(required = false)
public void setNoBean3(Optional<Member> member) {
  System.out.println("setNoBean3 = " + member);
}
```

## 조회 빈이 2개 이상 - 문제
@Autowired 는 타입(Type)으로 조회한다. 타입으로 조회할 때, 선택된 빈이 2개 이상일 때 문제가 발생한다.  
DiscountPolicy 의 하위타입인 FixDiscountPolicy, RateDiscountPolicy 둘다 스프링 빈으로 선언

```java
@Component
public class FixDiscountPolicy implements DiscountPolicy {}

@Component
public class RateDiscountPolicy implements DiscountPolicy {}
```

의존관계 자동 주입을 실행
```java
@Autowired
private DiscountPolicy discountPolicy
```

그러면 NoUniqueBeanDefinitionException 오류가 발생한다.  
이때 하위 타입으로 지정할 수도 있지만, 하위 타입으로 지정하는 것은 DIP를 위배하고 유연성이 떨어진다. 
그리고 이름만 다르고, 완전히 똑같은 타입의 스프링 빈이 2개 있을 때 해결이 안된다. 
스프링 빈을 수동 등록해서 문제를 해결해도 되지만, 의존 관계 자동 주입에서 해결되는 여러 방법이 있다.

### @Autowired 필드명, @Qualifier, @Primary
조회 대상 빈이 2개 이상일 때 해결 방법
+ @Autowired 필드명 매칭
+ @Qualifier -> @Qualifier끼리 매칭 -> 빈 이름 매칭
+ @Primary 사용

#### @Autowired 필드명 매칭
@Autowired 는 타입 매칭을 시도하고, 이때 여러 빈이 있으면 필드 이름, 파라미터 이름으로 빈 이름을 추가 매칭한다.

**기존 코드**
```java
@Autowired
private DiscountPolicy discountPolicy
```

**필드명을 빈 이름으로 변경**
```java
@Autowired
private DiscountPolicy rateDiscountPolicy
```

필드명이 rateDiscountPolicy 이므로 정상 주입된다.  
**필드명 매칭은 먼저 타입 매칭을 시도 하고 그 결과에 여러 빈이 있을 때 추가로 동작하는 기능이다.**

#### @Qualifier 사용
@Qualifier는 추가 구분자를 붙여주는 방법이다. 주입시 추가적인 방법을 제공하는 것이지 빈 이름을 변경하는 것은 아니다.

**빈 등록시 @Qualifier를 붙여 준다.**
```java
@Component
@Qualifier("mainDiscountPolicy")
public class RateDiscountPolicy implements DiscountPolicy {}

@Component
@Qualifier("fixDiscountPolicy")
public class FixDiscountPolicy implements DiscountPolicy {}
```

**주입시에 @Qualifier를 붙여주고 등록한 이름을 적어준다.**

**생성자 자동 주입 예시**

```java
@Autowired
public OrderServiceImpl(MemberRepository memberRepository, @Qualifier("mainDiscountPolicy") DiscountPolicy discountPolicy) {
  this.memberRepository = memberRepository;
  this.discountPolicy = discountPolicy;
}
```

**수정자 자동 주입 예시**

```java
@Autowired
public DiscountPolicy setDiscountPolicy(@Qualifier("mainDiscountPolicy") DiscountPolicy discountPolicy) {
  rerturn discountPolicy;
}
```

@Qualifier로 주입할 때 @Qualifier("mainDiscountPolicy") 를 못찾으면 어떻게 될까? 
그러면 mainDiscountPolicy라는 이름의 스프링 빈을 추가로 찾는다. 
하지만 경험상 @Qualifier는 @Qualifier를 찾는 용도로만 사용하는게 명확하고 좋다.

**직접 빈 등록시에도 @Qualifier를 동일하게 사용할 수 있다.**
```java
@Bean
@Qualifier("mainDiscountPolicy")
public DiscountPolicy discountPolicy() {
  return new ...
}
```

**Qualifier 정리**
1. @Qualifier끼리 매칭
2. 빈 이름 매칭
3. NoSuchBeanDefinitionException 예외 발생

#### @Primary 사용
@Primary는 우선순위를 정하는 방법이다. @Autowired 시에 여러 빈이 매칭되면 @Primary가 우선권을 가진다.

```java
//rateDiscountPolicy 가 우선권을 가진다.
@Component
@Primary
public class RateDiscountPolicy implements DiscountPolicy {}

@Component
public class FixDiscountPolicy implements DiscountPolicy {}
```

**@Primary, @Qualifier 활용**
코드에서 자주 사용하는 메인 데이터베이스의 커넥션을 획득하는 스프링 빈이 있고, 
가끔 사용하는 서브 데이터베이스의 커넥션을 획득하는 스프링 빈이 있다고 생각해보자. 
메인 데이터베이스의 커넥션을 획득하는 스프링 빈은 @Primary 를 적용해서 조회하는 곳에서 @Qualifier 지정 없이 편리하게 조회하고,  
서브 데이터베이스 커넥션 빈을 획들할 때는 @Qualifier 를 지정해서 명시적으로 획득하는 방식으로 사용하면 코드를 깜끌하게 유지할 수 있다. 
물론 이때 메인 데이터베이스의 스프링 빈을 등록할 때 @Qualifier 를 지정해주는 것은 상관없다.

**우선 순위**
@Primary 는 기본값 처럼 동작하는 것이고, @Qualifier 는 매우 상세하게 동작한다. 
이런 경우 스프링은 자동보다는 수동이, 넓은 범위의 선택권 보다는 좁은 범위의 선택권이 우선 순위가 높다. 
따라서 여기서도 @Qualifier 가 우선권이 높다.

## 자동, 수동의 올바른 실무 운영 기준
+ **편리한 자동 기능을 기본으로 사용하자**
+ 애플리케이션은 크게 업무 로직과 기술 지원 로직으로 나눌 수 있다.
  + 업무 로직 빈 : 웹을 지원하는 컨트롤러, 핵심 비즈니스 로직이 있는 서비스, 데이터 계층의 로직을 처리하는 리포지토리등이 모두 업무 로직이다. 보통 비즈니스 요구사항을 개발할 때 추가되거나 변경된다.
  + 기술 지원 빈 : 기술적인 문제나 공통 관심사(AOP)를 처리할 때 주로 사용된다. 데이터 베이스 연결이나, 공통 로그 처리 처럼 업무 로직을 지원하기 위한 하부 기술이나 공통 기술들이다.

+ 업무 로직은 숫자도 매우 많고, 한번 개발해야 하면 컨트롤러, 서비스, 리포지토리 처럼 어느정도 유사한 패턴이 있다. 이런 경우 자동 기능을 적극 사용하는 것이 좋다. 보통 문제가 발생해도 어떤 곳에서 문제가 발생했는지 명확하게 파악하기 쉽다.
+ 기술 지원 로직은 업무 로직과 비교해서 그 수가 매우 적고, 보통 애플리케이션 전반에 걸쳐서 광범위하게 영향을 미친다. 그리고 업무 로직은 문제가 발생할 때 어디가 문제인지 명확하게 잘 들어나지만, 기술 지원 로직은 적용이 잘 되고 있는지 아닌지 조차 파악하기 어려운 경우가 많다. 그래서 이런 기술 지원 로직들은 가급적 수동 빈 등록을 사용해서 명확하게 들어내는 것이 좋다.
+ **애플리케이션에 광범위하게 영향을 미치는 기술 지원 객체는 수동 빈으로 등록해서 설정 정보에 바로 나타나게 하는 것이 유지보수 하기 좋다.**

출처 - [스프링 핵심 원리 - 기본편 ](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/dashboard)
